/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";

import { useGLTF, useKeyboardControls } from "@react-three/drei";
import { useEffect, useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { useBoostStore } from "@/store/useBoostStore";

export function CharactereModel() {
  const { nodes } = useGLTF("/models/charactere.gltf");

  const groupRef = useRef<THREE.Group>(null);
  const [isJumping, setIsJumping] = useState(false);
  const [, get] = useKeyboardControls();
  const direction = new THREE.Vector3();
  const boostStore = useBoostStore();

  // Écoute clavier
  useEffect(() => {
    const onKeyDown = (e: KeyboardEvent) => {
      if (e.code === "Space") setIsJumping(true);
    };
    const onKeyUp = () => setIsJumping(false);
    window.addEventListener("keydown", onKeyDown);
    window.addEventListener("keyup", onKeyUp);
    return () => {
      window.removeEventListener("keydown", onKeyDown);
      window.removeEventListener("keyup", onKeyUp);
    };
  }, []);

  useFrame((state, delta) => {
    if (!groupRef.current) return;

    const t = state.clock.getElapsedTime();

    const { forward, backward, leftward, rightward } = get();
    direction.set(0, 0, 0);
    if (forward) direction.z -= 1;
    if (backward) direction.z += 1;
    if (leftward) direction.x -= 1;
    if (rightward) direction.x += 1;
    // On applique la rotation
    if (groupRef.current && direction.lengthSq() > 0.0001) {
      const targetRotation = new THREE.Quaternion();
      const lookAtDir = direction.clone().normalize();

      // Calcule la direction de regard normale
      const dummy = new THREE.Object3D();
      dummy.lookAt(lookAtDir.x, 0, lookAtDir.z);

      // Appliquer une rotation de +90° autour de Y à la direction
      const rotationOffset = new THREE.Quaternion().setFromAxisAngle(
        new THREE.Vector3(0, -1, 0),
        Math.PI / 2,
      );

      // Combine avec l’offset de 90°
      targetRotation.multiplyQuaternions(rotationOffset, dummy.quaternion);

      groupRef.current.quaternion.slerp(targetRotation, 10 * delta);
    }

    const legright = groupRef.current.getObjectByName("Legright");
    const legleft = groupRef.current.getObjectByName("legleft");

    const leftArm = groupRef.current.getObjectByName("ArmRight");
    const rightArm = groupRef.current.getObjectByName("ArmRight_2");

    const head = groupRef.current.getObjectByName("Head");

    if (legright && legleft) {
      // Applique une rotation conditionnelle
      legright.rotation.z = isJumping ? -Math.PI / 6 : 0;
      legleft.rotation.z = isJumping ? Math.PI / 6 : 0;
    }

    if (leftArm && rightArm) {
      leftArm.rotation.x = isJumping ? Math.PI / 10 : 0;
      rightArm.rotation.x = isJumping ? -Math.PI / 10 : 0;

      leftArm.position.z = isJumping ? 135 : 152;
      rightArm.position.z = isJumping ? -135 : -152;
    }

    if (head) {
      head.rotation.z = isJumping ? Math.PI / 10 : 0;
    }

    if (forward || backward || leftward || rightward) {
      const swing = Math.sin(t * 10) * (boostStore.isBoosted ? 0.8 : 0.4); // fréquence * amplitude
      const headSwing = Math.sin(t * 6) * 0.2; // fréquence * amplitude
      const armSwing = Math.sin(t * 4) * (boostStore.isBoosted ? 0.8 : 0.2); // fréquence * amplitude
      if (legright && legleft && !isJumping) {
        legright.rotation.z = swing;
        legleft.rotation.z = swing;
      }

      if (leftArm && rightArm) {
        leftArm.rotation.z = armSwing;
        rightArm.rotation.z = armSwing;
      }

      if (head) {
        head.rotation.z = headSwing;
      }
    }
  });
  return (
    <group
      scale={0.13}
      position={[0, 0, 0]}
      rotation={[0, Math.PI / 2, 0]}
      dispose={null}
      ref={groupRef}
      castShadow
      receiveShadow
    >
      <group scale={0.01}>
        <group
          name="legleft"
          position={[-3.112, -278.801, -67.139]}
          rotation={[0, Math.PI, 0]}
          scale={[-1, 1, 1]}
        >
          <mesh
            name="Cube_2"
            castShadow
            receiveShadow
            geometry={(nodes.Cube_2 as THREE.Mesh).geometry}
            material={(nodes.Cube_2 as THREE.Mesh).material}
            position={[-7.511, -74.293, 1.322]}
            rotation={[-3.128, Math.PI / 2, 0]}
            scale={[1.408, 0.79, 1.408]}
          />
          <mesh
            name="Cylinder_3"
            castShadow
            receiveShadow
            geometry={(nodes.Cylinder_3 as THREE.Mesh).geometry}
            material={(nodes.Cylinder_3 as THREE.Mesh).material}
            position={[-25.566, 26.954, -9.756]}
            rotation={[3.052, 0, 0]}
            scale={0.961}
          />
        </group>
        <group name="Legright" position={[-3.112, -278.801, 74.632]}>
          <mesh
            name="Cube_2_1"
            castShadow
            receiveShadow
            geometry={(nodes.Cube_2_1 as THREE.Mesh).geometry}
            material={(nodes.Cube_2_1 as THREE.Mesh).material}
            position={[-7.511, -74.293, 1.322]}
            rotation={[-3.128, Math.PI / 2, 0]}
            scale={[1.408, 0.79, 1.408]}
          />
          <mesh
            name="Cylinder_3_1"
            castShadow
            receiveShadow
            geometry={(nodes.Cylinder_3_1 as THREE.Mesh).geometry}
            material={(nodes.Cylinder_3_1 as THREE.Mesh).material}
            position={[-25.566, 26.954, -9.756]}
            rotation={[3.052, 0, 0]}
            scale={0.961}
          />
        </group>
        <group
          name="ArmRight_2"
          position={[-25.01, -83.755, -156.971]}
          rotation={[0, Math.PI, 0]}
          scale={[-1, 1, 1]}
        >
          <group name="Hand" position={[3.224, -52.716, 57.051]}>
            <mesh
              name="Sphere_6"
              castShadow
              receiveShadow
              geometry={(nodes.Sphere_6 as THREE.Mesh).geometry}
              material={(nodes.Sphere_6 as THREE.Mesh).material}
              position={[34.505, -3.744, 3.744]}
              rotation={[Math.PI / 4, 0, 0]}
              scale={0.356}
            />
            <mesh
              name="Sphere_2"
              castShadow
              receiveShadow
              geometry={(nodes.Sphere_2 as THREE.Mesh).geometry}
              material={(nodes.Sphere_2 as THREE.Mesh).material}
              position={[-7.412, 0, 0]}
              rotation={[Math.PI / 4, 0, 0]}
              scale={0.898}
            />
          </group>
          <mesh
            name="Cylinder"
            castShadow
            receiveShadow
            geometry={(nodes.Cylinder as THREE.Mesh).geometry}
            material={(nodes.Cylinder as THREE.Mesh).material}
            position={[-2.46, 19.949, -20.147]}
            rotation={[2.281, 0, 0]}
          />
        </group>
        <group name="ArmRight" position={[-25.01, -83.755, 156.971]}>
          <group name="Hand_1" position={[3.224, -52.716, 57.051]}>
            <mesh
              name="Sphere_6_1"
              castShadow
              receiveShadow
              geometry={(nodes.Sphere_6_1 as THREE.Mesh).geometry}
              material={(nodes.Sphere_6_1 as THREE.Mesh).material}
              position={[34.505, -3.744, 3.744]}
              rotation={[Math.PI / 4, 0, 0]}
              scale={0.356}
            />
            <mesh
              name="Sphere_2_1"
              castShadow
              receiveShadow
              geometry={(nodes.Sphere_2_1 as THREE.Mesh).geometry}
              material={(nodes.Sphere_2_1 as THREE.Mesh).material}
              position={[-7.412, 0, 0]}
              rotation={[Math.PI / 4, 0, 0]}
              scale={0.898}
            />
          </group>
          <mesh
            name="Cylinder_1"
            castShadow
            receiveShadow
            geometry={(nodes.Cylinder_1 as THREE.Mesh).geometry}
            material={(nodes.Cylinder_1 as THREE.Mesh).material}
            position={[-2.46, 19.949, -20.147]}
            rotation={[2.281, 0, 0]}
          />
        </group>
        <mesh
          name="Body"
          castShadow
          receiveShadow
          geometry={(nodes.Body as THREE.Mesh).geometry}
          material={(nodes.Body as THREE.Mesh).material}
          position={[-30.081, -81.354, 1.181]}
          scale={[2.848, 2.127, 3.474]}
        />
        <group name="Head" position={[0, 180.701, 0.555]} scale={0.892}>
          <group
            name="Gordon"
            position={[112.504, -209.544, -0.612]}
            scale={1.121}
          >
            <mesh
              name="Path_2"
              castShadow
              receiveShadow
              geometry={(nodes.Path_2 as THREE.Mesh).geometry}
              material={(nodes.Path_2 as THREE.Mesh).material}
              position={[-13.803, 26.881, -4.063]}
              rotation={[1.024, -0.846, -0.016]}
              scale={0.151}
            />
            <mesh
              name="Path"
              castShadow
              receiveShadow
              geometry={(nodes.Path as THREE.Mesh).geometry}
              material={(nodes.Path as THREE.Mesh).material}
              position={[-13.084, 30.761, 14.34]}
              rotation={[-2.46, 1.119, 1.577]}
              scale={0.151}
            />
          </group>
          <group name="Group" position={[141.628, -14.276, 6.08]}>
            <mesh
              name="Sphere_5"
              castShadow
              receiveShadow
              geometry={(nodes.Sphere_5 as THREE.Mesh).geometry}
              material={(nodes.Sphere_5 as THREE.Mesh).material}
              position={[0, 0, -48.921]}
              rotation={[-Math.PI / 2, Math.PI / 2, 0]}
              scale={0.513}
            />
            <mesh
              name="Sphere_4"
              castShadow
              receiveShadow
              geometry={(nodes.Sphere_4 as THREE.Mesh).geometry}
              material={(nodes.Sphere_4 as THREE.Mesh).material}
              position={[0, 0, 48.921]}
              rotation={[-Math.PI / 2, Math.PI / 2, 0]}
              scale={0.513}
            />
          </group>
          <mesh
            name="Cube"
            castShadow
            receiveShadow
            geometry={(nodes.Cube as THREE.Mesh).geometry}
            material={(nodes.Cube as THREE.Mesh).material}
            position={[-7.797, 26.322, 0]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={[1.12, 1.291, 1.12]}
          />
          <mesh
            name="Sphere"
            castShadow
            receiveShadow
            geometry={(nodes.Sphere as THREE.Mesh).geometry}
            material={(nodes.Sphere as THREE.Mesh).material}
            position={[21.473, -23.887, 9.578]}
            rotation={[Math.PI / 2, 1.354, -Math.PI / 2]}
            scale={[3.417, 2.948, 3.313]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/charactere.gltf");
